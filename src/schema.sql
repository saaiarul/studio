--
-- Create the 'businesses' table
--
CREATE TABLE
  public.businesses (
    id TEXT NOT NULL DEFAULT 'comp-' || lower(hex_encode(random_bytes(6))),
    name TEXT NOT NULL,
    owner_email TEXT NOT NULL,
    password TEXT,
    review_url TEXT,
    google_review_link TEXT,
    status public.business_status DEFAULT 'pending'::public.business_status NOT NULL,
    credits INTEGER DEFAULT 0 NOT NULL,
    logo_url TEXT,
    welcome_message TEXT,
    theme JSONB,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    CONSTRAINT businesses_pkey PRIMARY KEY (id),
    CONSTRAINT businesses_owner_email_key UNIQUE (owner_email)
  );

--
-- Create the 'review_form_fields' table
--
CREATE TABLE
  public.review_form_fields (
    id TEXT NOT NULL,
    business_id TEXT NOT NULL,
    type public.review_field_type NOT NULL,
    label TEXT NOT NULL,
    is_optional BOOLEAN DEFAULT FALSE NOT NULL,
    "order" INTEGER NOT NULL,
    CONSTRAINT review_form_fields_pkey PRIMARY KEY (id, business_id),
    CONSTRAINT review_form_fields_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.businesses (id) ON DELETE CASCADE
  );

--
-- Create the 'customers' table
--
CREATE TABLE
  public.customers (
    id TEXT NOT NULL DEFAULT 'cust-' || lower(hex_encode(random_bytes(6))),
    business_id TEXT NOT NULL,
    name TEXT NOT NULL,
    phone TEXT,
    email TEXT,
    first_review_date DATE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    CONSTRAINT customers_pkey PRIMARY KEY (id),
    CONSTRAINT customers_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.businesses (id) ON DELETE CASCADE
  );

--
-- Create the 'feedback' table
--
CREATE TABLE
  public.feedback (
    id TEXT NOT NULL DEFAULT 'fb-' || lower(hex_encode(random_bytes(8))),
    business_id TEXT NOT NULL,
    customer_id TEXT NOT NULL,
    rating INTEGER NOT NULL,
    comment TEXT,
    date DATE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    CONSTRAINT feedback_pkey PRIMARY KEY (id),
    CONSTRAINT feedback_business_id_fkey FOREIGN KEY (business_id) REFERENCES public.businesses (id) ON DELETE CASCADE,
    CONSTRAINT feedback_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES public.customers (id) ON DELETE CASCADE
  );

--
-- Create the 'feedback_values' table
--
CREATE TABLE
  public.feedback_values (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    feedback_id TEXT NOT NULL,
    field_id TEXT NOT NULL,
    value TEXT NOT NULL,
    business_id TEXT NOT NULL, -- To reference the form field correctly
    CONSTRAINT feedback_values_pkey PRIMARY KEY (id),
    CONSTRAINT feedback_values_feedback_id_fkey FOREIGN KEY (feedback_id) REFERENCES public.feedback (id) ON DELETE CASCADE,
    CONSTRAINT feedback_values_field_id_business_id_fkey FOREIGN KEY (field_id, business_id) REFERENCES public.review_form_fields (id, business_id) ON DELETE CASCADE
  );

--
-- RLS Policies for 'businesses'
--
ALTER TABLE public.businesses ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access on businesses" ON public.businesses FOR SELECT USING (true);
CREATE POLICY "Allow admin full access on businesses" ON public.businesses FOR ALL USING (true);

--
-- RLS Policies for 'review_form_fields'
--
ALTER TABLE public.review_form_fields ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access on review_form_fields" ON public.review_form_fields FOR SELECT USING (true);
CREATE POLICY "Allow admin full access on review_form_fields" ON public.review_form_fields FOR ALL USING (true);

--
-- RLS Policies for 'customers'
--
ALTER TABLE public.customers ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access on customers" ON public.customers FOR SELECT USING (true);
CREATE POLICY "Allow admin full access on customers" ON public.customers FOR ALL USING (true);

--
-- RLS Policies for 'feedback'
--
ALTER TABLE public.feedback ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access on feedback" ON public.feedback FOR SELECT USING (true);
CREATE POLICY "Allow admin full access on feedback" ON public.feedback FOR ALL USING (true);

--
-- RLS Policies for 'feedback_values'
--
ALTER TABLE public.feedback_values ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access on feedback_values" ON public.feedback_values FOR SELECT USING (true);
CREATE POLICY "Allow admin full access on feedback_values" ON public.feedback_values FOR ALL USING (true);

--
-- Custom Types (Enums)
--
CREATE TYPE public.business_status AS ENUM('approved', 'pending', 'rejected');
CREATE TYPE public.review_field_type AS ENUM('rating', 'comment');
